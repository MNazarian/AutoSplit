{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e57d86a3-07d8-498b-b355-d7a1b398a15b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading and preprocessing data...\n",
      "Reading CSV file...\n",
      "Filtering invalid entries and removing label 4...\n",
      "\n",
      "Class distribution before downsampling:\n",
      "label_majority\n",
      "1    3238\n",
      "2    9753\n",
      "3    2106\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Downsampling only class 2 to 70.0% of its original size...\n",
      "\n",
      "Class distribution after downsampling:\n",
      "label_majority\n",
      "1    3238\n",
      "2    6827\n",
      "3    2106\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Calculating features...\n",
      "All important features are present in the dataset.\n",
      "\n",
      "Preparing features and target...\n",
      "Splitting data...\n",
      "Training model...\n",
      "\n",
      "Training with 60 features:\n",
      "1. num_solids\n",
      "2. num_faces\n",
      "3. num_edges\n",
      "4. volume\n",
      "5. surface_area\n",
      "6. x_dim\n",
      "7. y_dim\n",
      "8. z_dim\n",
      "9. num_line_edges\n",
      "10. num_circle_edges\n",
      "11. num_ellipse_edges\n",
      "12. num_hyperbola_edges\n",
      "13. num_parabola_edges\n",
      "14. num_beziercurve_edges\n",
      "15. num_bsplinecurve_edges\n",
      "16. num_othercurve_edges\n",
      "17. num_plane_surfaces\n",
      "18. num_cylinder_surfaces\n",
      "19. num_cone_surfaces\n",
      "20. num_sphere_surfaces\n",
      "21. num_torus_surfaces\n",
      "22. num_bezier_surfaces\n",
      "23. num_bspline_surfaces\n",
      "24. num_revolution_surfaces\n",
      "25. num_extrusion_surfaces\n",
      "26. num_other_surfaces\n",
      "27. num_unique_normals\n",
      "28. wall_thickness\n",
      "29. x_center_mass_relative\n",
      "30. y_center_mass_relative\n",
      "31. z_center_mass_relative\n",
      "32. volume_to_surface_ratio\n",
      "33. edge_to_face_ratio\n",
      "34. average_face_area\n",
      "35. edge_complexity\n",
      "36. surface_complexity\n",
      "37. thickness_complexity\n",
      "38. average_edge_length\n",
      "39. shape_factor\n",
      "40. num_line_edges_ratio\n",
      "41. num_circle_edges_ratio\n",
      "42. num_ellipse_edges_ratio\n",
      "43. num_bsplinecurve_edges_ratio\n",
      "44. num_plane_surfaces_ratio\n",
      "45. num_cylinder_surfaces_ratio\n",
      "46. num_cone_surfaces_ratio\n",
      "47. num_sphere_surfaces_ratio\n",
      "48. num_torus_surfaces_ratio\n",
      "49. num_bspline_surfaces_ratio\n",
      "50. aspect_ratio_xy\n",
      "51. aspect_ratio_xz\n",
      "52. aspect_ratio_yz\n",
      "53. volume_to_xyz\n",
      "54. surface_to_xyz\n",
      "55. center_mass_distance\n",
      "56. log_volume\n",
      "57. log_surface_area\n",
      "58. log_num_faces\n",
      "59. log_num_edges\n",
      "60. overall_complexity\n",
      "Making predictions...\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         1.0       0.75      0.74      0.74       648\n",
      "         2.0       0.85      0.85      0.85      1366\n",
      "         3.0       0.80      0.85      0.82       421\n",
      "\n",
      "    accuracy                           0.82      2435\n",
      "   macro avg       0.80      0.81      0.80      2435\n",
      "weighted avg       0.82      0.82      0.82      2435\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model saved as: models/new_model_101.joblib\n",
      "Scaler saved as: models/new_scaler_101.joblib\n",
      "Selected features saved as: models/selected_features_101.joblib\n",
      "\n",
      "Top 20 most important features:\n",
      "                         Feature  Importance\n",
      "38                  shape_factor    0.085678\n",
      "36          thickness_complexity    0.080241\n",
      "27                wall_thickness    0.053853\n",
      "14        num_bsplinecurve_edges    0.033427\n",
      "52                 volume_to_xyz    0.031898\n",
      "42  num_bsplinecurve_edges_ratio    0.029119\n",
      "48    num_bspline_surfaces_ratio    0.028144\n",
      "49               aspect_ratio_xy    0.023305\n",
      "59            overall_complexity    0.023135\n",
      "1                      num_faces    0.022878\n",
      "31       volume_to_surface_ratio    0.021638\n",
      "39          num_line_edges_ratio    0.021222\n",
      "37           average_edge_length    0.021095\n",
      "58                 log_num_edges    0.020427\n",
      "47      num_torus_surfaces_ratio    0.020045\n",
      "50               aspect_ratio_xz    0.019086\n",
      "22          num_bspline_surfaces    0.018890\n",
      "51               aspect_ratio_yz    0.018109\n",
      "2                      num_edges    0.017958\n",
      "57                 log_num_faces    0.017169\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from imblearn.combine import SMOTETomek\n",
    "from imblearn.pipeline import Pipeline as imbPipeline\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import joblib\n",
    "from datetime import datetime\n",
    "import os\n",
    "import gc\n",
    "\n",
    "def safe_divide(a, b):\n",
    "    \"\"\"Safely divide two pandas series or numpy arrays.\"\"\"\n",
    "    a = a.astype(np.float64)\n",
    "    b = b.astype(np.float64)\n",
    "    return np.divide(a, b, out=np.zeros_like(a, dtype=np.float64), where=b!=0)\n",
    "\n",
    "def calculate_features(data):\n",
    "    \"\"\"Calculate advanced geometric and topological features from the input data.\"\"\"\n",
    "    data = data.copy()\n",
    "    numeric_columns = data.select_dtypes(include=[np.number]).columns\n",
    "    data[numeric_columns] = data[numeric_columns].astype(np.float64)\n",
    "    \n",
    "    # Basic features\n",
    "    features_to_calculate = [\n",
    "        ('volume_to_surface_ratio', 'volume', 'surface_area'),\n",
    "        ('edge_to_face_ratio', 'num_edges', 'num_faces'),\n",
    "        ('average_face_area', 'surface_area', 'num_faces'),\n",
    "        ('edge_complexity', 'num_edges', 'num_faces'),\n",
    "        ('surface_complexity', 'num_unique_normals', 'num_faces'),\n",
    "        ('thickness_complexity', 'wall_thickness', 'num_faces')\n",
    "    ]\n",
    "    \n",
    "    for new_feat, num, denom in features_to_calculate:\n",
    "        data[new_feat] = safe_divide(data[num].values, data[denom].values)\n",
    "    \n",
    "    # Edge length\n",
    "    data['average_edge_length'] = safe_divide(\n",
    "        data[['x_dim', 'y_dim', 'z_dim']].sum(axis=1).values,\n",
    "        data['num_edges'].values\n",
    "    )\n",
    "    \n",
    "    # Shape factor\n",
    "    volume_pow = np.power(data['volume'].values, 2/3)\n",
    "    data['shape_factor'] = safe_divide(data['surface_area'].values, volume_pow)\n",
    "    \n",
    "    # Ratios - Diese sind wichtig und müssen verwendet werden\n",
    "    edge_columns = ['num_line_edges', 'num_circle_edges', 'num_ellipse_edges', 'num_bsplinecurve_edges']\n",
    "    surface_columns = ['num_plane_surfaces', 'num_cylinder_surfaces', 'num_cone_surfaces', \n",
    "                    'num_sphere_surfaces', 'num_torus_surfaces', 'num_bspline_surfaces']\n",
    "    \n",
    "    # Edge ratios\n",
    "    edge_total = data[edge_columns].sum(axis=1).values\n",
    "    for col in edge_columns:\n",
    "        data[f'{col}_ratio'] = safe_divide(data[col].values, edge_total)\n",
    "    \n",
    "    # Surface ratios\n",
    "    surface_total = data[surface_columns].sum(axis=1).values\n",
    "    for col in surface_columns:\n",
    "        data[f'{col}_ratio'] = safe_divide(data[col].values, surface_total)\n",
    "    \n",
    "    # Aspect ratios - Geometrical features, die verwendet werden müssen\n",
    "    data['aspect_ratio_xy'] = safe_divide(data['x_dim'].values, data['y_dim'].values)\n",
    "    data['aspect_ratio_xz'] = safe_divide(data['x_dim'].values, data['z_dim'].values)\n",
    "    data['aspect_ratio_yz'] = safe_divide(data['y_dim'].values, data['z_dim'].values)\n",
    "    \n",
    "    # Volume ratios\n",
    "    xyz_product = data['x_dim'].values * data['y_dim'].values * data['z_dim'].values\n",
    "    data['volume_to_xyz'] = safe_divide(data['volume'].values, xyz_product)\n",
    "    data['surface_to_xyz'] = safe_divide(data['surface_area'].values, xyz_product)\n",
    "    \n",
    "    # Center mass distance\n",
    "    center_cols = ['x_center_mass_relative', 'y_center_mass_relative', 'z_center_mass_relative']\n",
    "    center_mass_coords = data[center_cols].values - 0.5\n",
    "    data['center_mass_distance'] = np.linalg.norm(center_mass_coords, axis=1)\n",
    "    \n",
    "    # Log transforms - müssen verwendet werden\n",
    "    for col in ['volume', 'surface_area', 'num_faces', 'num_edges']:\n",
    "        min_positive = max(data[col].min(), 1e-10)\n",
    "        data[f'log_{col}'] = np.log1p(data[col].clip(lower=min_positive))\n",
    "    \n",
    "    # Complexity score - wichtige Komplexitätsmaße\n",
    "    complexity_cols = ['edge_complexity', 'surface_complexity', 'thickness_complexity']\n",
    "    data['overall_complexity'] = data[complexity_cols].clip(lower=0).mean(axis=1)\n",
    "    \n",
    "    # Clean up\n",
    "    data = data.replace([np.inf, -np.inf], 0).fillna(0)\n",
    "    \n",
    "    # Verify that important features are present\n",
    "    important_features = [\n",
    "        # Geometrical features\n",
    "        'aspect_ratio_xy', 'aspect_ratio_xz', 'aspect_ratio_yz',\n",
    "        # Complexity measures\n",
    "        'edge_complexity', 'surface_complexity', 'thickness_complexity', 'overall_complexity',\n",
    "        # Log transformations\n",
    "        'log_volume', 'log_surface_area', 'log_num_faces', 'log_num_edges'\n",
    "    ]\n",
    "    \n",
    "    # Add ratio features to the important list\n",
    "    for col in edge_columns:\n",
    "        important_features.append(f'{col}_ratio')\n",
    "    for col in surface_columns:\n",
    "        important_features.append(f'{col}_ratio')\n",
    "    \n",
    "    # Check if all important features are present\n",
    "    missing_features = [f for f in important_features if f not in data.columns]\n",
    "    if missing_features:\n",
    "        print(f\"WARNING: Missing important features: {missing_features}\")\n",
    "    else:\n",
    "        print(\"All important features are present in the dataset.\")\n",
    "    \n",
    "    return data\n",
    "\n",
    "def load_and_preprocess_data(file_path, sample_size=None):\n",
    "    \"\"\"Load and preprocess the data with class-specific downsampling.\"\"\"\n",
    "    print(\"Reading CSV file...\")\n",
    "    data = pd.read_csv(file_path)\n",
    "    \n",
    "    print(\"Filtering invalid entries and removing label 4...\")\n",
    "    mask = (data['volume'] > 0) & (data['surface_area'] > 0) & (data['label_majority'] != 4)\n",
    "    data = data[mask].copy()\n",
    "    \n",
    "    if 'filename' in data.columns:\n",
    "        data = data.drop(columns=['filename'])\n",
    "    \n",
    "    print(\"\\nClass distribution before downsampling:\")\n",
    "    print(data['label_majority'].value_counts().sort_index())\n",
    "    \n",
    "    if sample_size is not None and sample_size < 1.0:\n",
    "        print(f\"\\nDownsampling only class 2 to {sample_size*100}% of its original size...\")\n",
    "        \n",
    "        # Separate the dataset by class\n",
    "        class1_data = data[data['label_majority'] == 1.0]\n",
    "        class2_data = data[data['label_majority'] == 2.0]\n",
    "        class3_data = data[data['label_majority'] == 3.0]\n",
    "        \n",
    "        # Only downsample class 2\n",
    "        downsampled_class2 = class2_data.sample(frac=sample_size, random_state=42)\n",
    "        \n",
    "        # Recombine the datasets\n",
    "        data = pd.concat([class1_data, downsampled_class2, class3_data], ignore_index=True)\n",
    "        \n",
    "        print(\"\\nClass distribution after downsampling:\")\n",
    "        print(data['label_majority'].value_counts().sort_index())\n",
    "    \n",
    "    print(\"\\nCalculating features...\")\n",
    "    data = calculate_features(data)\n",
    "    \n",
    "    return data\n",
    "\n",
    "def train_model(X_train, y_train, random_state=42):\n",
    "    \"\"\"Train the model with custom SMOTE parameters.\"\"\"\n",
    "    n_samples = len(X_train)\n",
    "    \n",
    "    # Print information about the features used for training\n",
    "    print(f\"\\nTraining with {X_train.shape[1]} features:\")\n",
    "    for i, feature in enumerate(X_train.columns, 1):\n",
    "        print(f\"{i}. {feature}\")\n",
    "    \n",
    "    # Adjust k_neighbors based on class sizes\n",
    "    k_neighbors = min(5, n_samples // 100)\n",
    "    \n",
    "    pipeline = imbPipeline([\n",
    "        ('scaler', StandardScaler()),\n",
    "        ('smotetomek', SMOTETomek(\n",
    "            sampling_strategy='auto',\n",
    "            smote=SMOTE(k_neighbors=k_neighbors, random_state=random_state),\n",
    "            random_state=random_state\n",
    "        )),\n",
    "        ('classifier', RandomForestClassifier(\n",
    "            n_estimators=100,\n",
    "            random_state=random_state,\n",
    "            n_jobs=-1  # Use all cores\n",
    "        ))\n",
    "    ])\n",
    "    \n",
    "    pipeline.fit(X_train, y_train)\n",
    "    return pipeline\n",
    "\n",
    "def save_model_components(pipeline, le, X_train, version=\"11\"):\n",
    "    \"\"\"\n",
    "    Save the trained model components separately with specified version number:\n",
    "    - Random Forest model\n",
    "    - Scaler\n",
    "    - Selected features\n",
    "    \"\"\"\n",
    "    # Create directory if it doesn't exist\n",
    "    os.makedirs('models', exist_ok=True)\n",
    "    \n",
    "    # Extract components from pipeline\n",
    "    rf_model = pipeline.named_steps['classifier']\n",
    "    scaler = pipeline.named_steps['scaler']\n",
    "    \n",
    "    # Get feature names\n",
    "    selected_features = list(X_train.columns)\n",
    "    \n",
    "    # Prepare filenames with specified version\n",
    "    model_filename = f'models/new_model_{version}.joblib'\n",
    "    scaler_filename = f'models/new_scaler_{version}.joblib'\n",
    "    features_filename = f'models/selected_features_{version}.joblib'\n",
    "    \n",
    "    # Save components\n",
    "    joblib.dump(rf_model, model_filename)\n",
    "    joblib.dump(scaler, scaler_filename)\n",
    "    joblib.dump(selected_features, features_filename)\n",
    "    \n",
    "    print(f\"\\nModel saved as: {model_filename}\")\n",
    "    print(f\"Scaler saved as: {scaler_filename}\")\n",
    "    print(f\"Selected features saved as: {features_filename}\")\n",
    "    \n",
    "    # Feature importance analysis\n",
    "    feature_importances = rf_model.feature_importances_\n",
    "    features_df = pd.DataFrame({\n",
    "        'Feature': selected_features,\n",
    "        'Importance': feature_importances\n",
    "    }).sort_values('Importance', ascending=False)\n",
    "    \n",
    "    print(\"\\nTop 20 most important features:\")\n",
    "    print(features_df.head(20))\n",
    "\n",
    "def main():\n",
    "    # Set your file path here\n",
    "    file_path = r\"C:\\Users\\meh91075\\Downloads\\features_newWallthickness_16092024.csv\"\n",
    "    \n",
    "    # Optional: Use a smaller sample size for development/testing\n",
    "    # Set to None or 1.0 to use full dataset\n",
    "    SAMPLE_SIZE = 0.7  # Use 50% of data (only for class 2)\n",
    "    \n",
    "    print(\"Loading and preprocessing data...\")\n",
    "    df = load_and_preprocess_data(file_path, sample_size=SAMPLE_SIZE)\n",
    "    \n",
    "    print(\"\\nPreparing features and target...\")\n",
    "    X = df.drop(columns=['label_majority'])\n",
    "    y = df['label_majority']\n",
    "    \n",
    "    # Clean up memory\n",
    "    del df\n",
    "    gc.collect()\n",
    "    \n",
    "    le = LabelEncoder()\n",
    "    y_encoded = le.fit_transform(y)\n",
    "    \n",
    "    print(\"Splitting data...\")\n",
    "    X_train, X_test, y_train, y_test = train_test_split(\n",
    "        X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded\n",
    "    )\n",
    "    \n",
    "    # Clean up memory\n",
    "    del X\n",
    "    gc.collect()\n",
    "    \n",
    "    print(\"Training model...\")\n",
    "    pipeline = train_model(X_train, y_train)\n",
    "    \n",
    "    print(\"Making predictions...\")\n",
    "    y_pred = pipeline.predict(X_test)\n",
    "    \n",
    "    y_test_original = le.inverse_transform(y_test)\n",
    "    y_pred_original = le.inverse_transform(y_pred)\n",
    "    \n",
    "    print(\"\\nClassification Report:\")\n",
    "    print(classification_report(y_test_original, y_pred_original))\n",
    "    \n",
    "    cm = confusion_matrix(y_test_original, y_pred_original)\n",
    "    plt.figure(figsize=(10, 8))\n",
    "    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
    "    plt.title('Confusion Matrix')\n",
    "    plt.xlabel('Predicted Label')\n",
    "    plt.ylabel('True Label')\n",
    "    plt.show()\n",
    "    \n",
    "    # Save model components separately with version number\n",
    "    save_model_components(pipeline, le, X_train, version=\"101\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pyoccenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
